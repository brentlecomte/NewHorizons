"use strict";
var rxjs_1 = require('rxjs');
var fs_1 = require('fs');
var fs = require('fs');
var path = require('path');
var rimraf = require('rimraf');
var minimatch = require('minimatch');
var mkdirp = require('mkdirp');
var glob = require('glob');
function cleantmp(options) {
    if (options === void 0) { options = {}; }
    var prefix = options.prefix || 'tmp';
    return rxjs_1.Observable.create(function (observer) {
        var folder;
        fs_1.mkdtemp(prefix, function (err, _folder) {
            if (err) {
                observer.error(err);
            }
            else {
                folder = _folder;
                if (options.assets) {
                    copyAssetsToFolder(folder, options.assets, options.globToDisk)
                        .then(function () {
                        observer.next(folder);
                    }, function (err) {
                        observer.error(err);
                    });
                }
                else {
                    observer.next(folder);
                }
            }
        });
        return function () {
            if (folder) {
                if (options.globFromDisk)
                    copyFolderToAssets(folder, options.assets, options.globFromDisk);
                rimraf.sync(folder);
            }
        };
    });
}
exports.cleantmp = cleantmp;
function copyAssetsToFolder(directory, assets, pattern) {
    return Promise.resolve(Object.keys(assets)
        .filter(function (match) { return minimatch(match, pattern); }))
        .then(function (matches) { return Promise.all(matches.map(function (match) {
        return new Promise(function (res, rej) {
            var subdir = match.replace(path.basename(match), '');
            if (subdir)
                mkdirp.sync(path.join(directory, subdir));
            fs_1.writeFile(path.resolve(directory, match), assets[match].source(), function (err) {
                if (err)
                    return rej(err);
                res();
            });
        });
    })); });
}
function copyFolderToAssets(directory, assets, pattern) {
    pattern = pattern || '**/*';
    glob.sync(pattern, { cwd: directory }).forEach(function (f) {
        var source = fs.readFileSync(path.resolve(directory, f)).toString();
        assets[f] = {
            source: function () { return source; },
            size: function () { return source.length; }
        };
    });
}
//# sourceMappingURL=cleantmp.js.map